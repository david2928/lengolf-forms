{
  "permissions": {
    "allow": [
      "Read(/C:\\vs_code\\lengolf-forms-feature\\lengolf-forms\\src\\components\\meta-ads-dashboard/**)",
      "Read(/C:\\vs_code\\lengolf-forms-feature\\lengolf-forms\\src\\components\\meta-ads-dashboard/**)",
      "mcp__supabase__execute_sql",
      "Bash(curl:*)",
      "Bash(npm run typecheck:*)",
      "Bash(npm run lint)",
      "Bash(git add:*)",
      "Bash(git commit:*)",
      "Bash(git push:*)",
      "Bash(npm info:*)",
      "Bash(npm install:*)",
      "Bash(npm run build:*)",
      "Bash(npm ls:*)",
      "mcp__supabase__list_tables",
      "Bash(npm audit:*)",
      "WebSearch",
      "mcp__supabase__apply_migration",
      "Bash(npx tsc:*)",
      "Read(//c/c/vs_code/lengolf-forms-feature/lengolf-forms/**)",
      "Bash(npm run fix-emoji:*)",
      "Bash(grep:*)",
      "Bash(git log:*)",
      "Bash(git restore:*)",
      "Bash(node:*)",
      "Bash(npm --version)",
      "Bash(if [ -f .env.local ])",
      "Bash(then echo \"âœ“ .env.local exists\")",
      "Bash(else echo \"âœ— .env.local missing\")",
      "Bash(fi)",
      "Bash(if [ -f .env.example ])",
      "Bash(then echo \"âœ“ .env.example exists\")",
      "Bash(else echo \"âœ— .env.example missing\")",
      "Bash(claude --version)",
      "Bash(git checkout:*)",
      "mcp__supabase__get_logs",
      "Bash(npx web-push:*)",
      "mcp__supabase__get_project_url",
      "Bash(export:*)",
      "WebFetch(domain:developers.line.biz)",
      "mcp__playwright__browser_navigate",
      "mcp__playwright__browser_snapshot",
      "Read(//c/vs_code/realtime-test-isolated/**)",
      "mcp__supabase__list_extensions",
      "Bash(then grep META_ .env.local)",
      "Bash(else echo \"No .env.local file found\")",
      "Bash(git show:*)",
      "WebFetch(domain:developers.facebook.com)",
      "Read(//c/vs_code/lengolf-booking-new/**)",
      "Bash(code:*)",
      "Bash(cat:*)",
      "Bash(find:*)",
      "Bash(python3:*)",
      "Bash(del cleanup-test-sessions.js)",
      "Bash(cd:*)",
      "Bash(npm run lint:*)",
      "Bash(gh pr create --title \"feat: Add animated toast notifications for booking events\" --body \"$(cat <<''EOF''\n## Summary\n- Implement animated toast notifications for booking events (create/modify/cancel)\n- Replace browser notifications with Sonner toast library\n- Add color-coded notifications: green for new bookings, yellow for modifications, red for cancellations\n- Display Booking ID and Customer ID inline with customer name in notifications\n- Show detailed change tracking for modified bookings\n\n## Changes\n- **NotificationsContext.tsx**: Added Sonner toast notifications with color-coded messages\n- **NotificationItem.tsx**: Display booking/customer IDs inline and show modification changes\n- **CancelBookingModal.tsx**: Removed duplicate notification creation (now handled by DB trigger)\n- **EditBookingModal.tsx**: Removed duplicate notification creation (now handled by DB trigger)\n\n## Implementation Details\n- Toast notifications appear on any page when new booking events occur\n- Colors match existing notification badge system (green/yellow/red)\n- Notification count badge updates in real-time via Realtime subscriptions\n- All notification creation now handled automatically by database trigger\n\n## Test Plan\n- [x] Create booking â†’ green toast appears\n- [x] Modify booking â†’ yellow toast appears  \n- [x] Cancel booking â†’ red toast appears\n- [x] Verify booking/customer IDs display correctly\n- [x] Verify change tracking shows for modifications\n- [x] Clean up test data\n\nðŸ¤– Generated with [Claude Code](https://claude.com/claude-code)\nEOF\n)\")",
      "Bash(git stash:*)",
      "Bash(gh pr list:*)",
      "Bash(claude mcp:*)",
      "Bash(powershell:*)",
      "mcp__flight-search__search_flights",
      "mcp__flight-search__get_reference_data",
      "mcp__flight-search__discover_flights",
      "mcp__flight-search__search_calendar",
      "Bash(git pull:*)",
      "Bash(npx eslint:*)",
      "Bash(tee:*)",
      "WebFetch(domain:booking.len.golf)"
    ],
    "deny": [],
    "ask": []
  },
  "enableAllProjectMcpServers": true,
  "enabledMcpjsonServers": [
    "supabase",
    "playwright",
    "bigquery"
  ]
}
